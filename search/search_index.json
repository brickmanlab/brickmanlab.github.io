{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Brickman Lab wiki!</p> <p>Here you can find documentation for our analysis workflows.</p> <p>For more information about our research, visit the Brickman Group website.</p>"},{"location":"rdm/","title":"Research Data Management Guidelines","text":""},{"location":"tools/","title":"Bioinformatics tools","text":"Tool Description NGS Language Link Functional enrichment on genomic regions CHIP-seq ATAC-seq R https://github.com/jokergoo/rGREAT Pseudotime inference scRNA-seq Python https://github.com/LouisFaure/scFates nan Single-cell analysis package scRNA-seq Python https://github.com/scverse/scanpy nan AI probabilistic package for transfer learning DR and more scRNA-seq Python https://github.com/scverse/scvi-tools Gene set enrichment analysis on steroids scRNA-seq Python https://github.com/zqfang/GSEApy nan UpsetR on stereoids (complicated Venn Diagrams) Plotting R https://github.com/krassowski/complex-upset nan Complex heatmap Plotting Python https://github.com/DingWB/PyComplexHeatmap nan"},{"location":"dangpu/","title":"DanGPU","text":"<p>For starting on the server make sure to read:</p> <ul> <li>DanGPU manual</li> <li>Genomics Platform wiki</li> <li>platforms: JupyterHub and RStudio</li> </ul>"},{"location":"dangpu/#first-time-on-server","title":"First time on server","text":"<ol> <li>Run the command to do basic setup and logout afterwards</li> </ol> <pre><code>/maps/projects/dan1/apps/etc/init_dangpu_env.sh &amp;&amp; \\\necho \"export MODULEPATH=/maps/projects/dan1/apps/.modules:\\${MODULEPATH}\" &gt;&gt; $HOME/.bash_profile\n</code></pre> <ol> <li>Create extra simlinks for folders</li> </ol> <pre><code>ln -s /maps/projects/dan1/people/$USER $HOME/datadir\nln -s ~/projects/data/Brickman $HOME/\n</code></pre>"},{"location":"dangpu/#folder-structure","title":"Folder structure","text":""},{"location":"dangpu/alphafold2/","title":"Alphafold 2","text":""},{"location":"dangpu/alphafold2/#1-running","title":"1. Running","text":""},{"location":"dangpu/alphafold2/#11-create-a-target-file","title":"1.1 Create a target file","text":"<pre><code># cat target.fasta\n&gt;query\nMAAHKGAEHHHKAAEHHEQAAKHHHAAAEHHEKGEHEQAAHHADTAYAHHKHAEEHAAQAAKHDAEHHAPKPH\n</code></pre>"},{"location":"dangpu/alphafold2/#12-setup-environments","title":"1.2. Setup environments","text":"<pre><code>srun -N 1 --ntasks-per-node=10 --gres=gpu:2 --pty bash\nmodule load miniconda/latest\nsource activate /maps/projects/dan1/data/Brickman/conda_envs/af2\ncd ~/projects/data/Brickman/alphafold\n</code></pre>"},{"location":"dangpu/alphafold2/#13-run-cli","title":"1.3. Run cli","text":"<pre><code>python run_alphafold.py \\\n--fasta_paths=~/projects/data/Brickman/target_01.fasta \\\n--output_dir=/scratch/tmp/alphatest \\\n--model_preset=monomer \\\n--db_preset=full_dbs \\\n--data_dir=~/projects/data/Alphafold2/24022023 \\\n--uniref30_database_path=~/projects/data/Alphafold2/24022023/uniref30/UniRef30_2021_03 \\\n--uniref90_database_path=~/projects/data/Alphafold2/24022023/uniref90/uniref90.fasta \\\n--mgnify_database_path=~/projects/data/Alphafold2/24022023/mgnify/mgy_clusters_2022_05.fa \\\n--pdb70_database_path=~/projects/data/Alphafold2/24022023/pdb70/pdb70 \\\n--template_mmcif_dir=~/projects/data/Alphafold2/24022023/pdb_mmcif/mmcif_files/ \\\n--obsolete_pdbs_path=~/projects/data/Alphafold2/24022023/pdb_mmcif/obsolete.dat \\\n--bfd_database_path=~/projects/data/Alphafold2/24022023/bfd/bfd_metaclust_clu_complete_id30_c90_final_seq.sorted_opt \\\n--max_template_date=2022-01-01 \\\n--use_gpu_relax\n</code></pre>"},{"location":"dangpu/alphafold2/#14-example-sbatch-script","title":"1.4. Example SBATCH script","text":"<pre><code>#!/bin/bash\n#SBATCH --job-name=AF2\n#SBATCH --gres=gpu:2\n#SBATCH --cpus-per-task=10\n#SBATCH --mail-type=BEGIN,END\n#SBATCH --mail-user=YOUR-EMAIL\nmodule load miniconda/latest\nsource activate af2\ncd ~/projects/data/Brickman/alphafold\nmkdir -p /scratch/tmp/alphatest\n\nsrun python run_alphafold.py \\\n--fasta_paths=~/projects/data/Brickman/target_01.fasta \\\n--output_dir=/scratch/tmp/alphatest \\\n--model_preset=monomer \\\n--db_preset=full_dbs \\\n--data_dir=~/projects/data/Alphafold2/24022023 \\\n--uniref30_database_path=~/projects/data/Alphafold2/24022023/uniref30/UniRef30_2021_03 \\\n--uniref90_database_path=~/projects/data/Alphafold2/24022023/uniref90/uniref90.fasta \\\n--mgnify_database_path=~/projects/data/Alphafold2/24022023/mgnify/mgy_clusters_2022_05.fa \\\n--pdb70_database_path=~/projects/data/Alphafold2/24022023/pdb70/pdb70 \\\n--template_mmcif_dir=~/projects/data/Alphafold2/24022023/pdb_mmcif/mmcif_files/ \\\n--obsolete_pdbs_path=~/projects/data/Alphafold2/24022023/pdb_mmcif/obsolete.dat \\\n--bfd_database_path=~/projects/data/Alphafold2/24022023/bfd/bfd_metaclust_clu_complete_id30_c90_final_seq.sorted_opt \\\n--max_template_date=2022-01-01 \\\n--use_gpu_relax\n</code></pre>"},{"location":"dangpu/alphafold2/#2-installation","title":"2. Installation","text":"<pre><code>conda create --prefix /maps/projects/dan1/data/Brickman/conda_envs/af2 python=3.8\nsource activate /maps/projects/dan1/data/Brickman/conda_envs/af2\n\nmamba install hmmer\npip install py3dmol\nmamba install pdbfixer==1.7\nmamba install -c conda-forge openmm=7.5.1\n\ncd /maps/projects/dan1/data/Brickman/\ngit clone --branch main https://github.com/deepmind/alphafold alphafold\npip install -r ./alphafold/requirements.txt\npip install --no-dependencies ./alphafold\n\n# stereo chemical props needs to be in common folder\nwget \u2013q \u2013P  /maps/projects/dan1/data/Brickman/alphafold/alphafold/common/ https://git.scicore.unibas.ch/schwede/openstructure/-/raw/7102c63615b64735c4941278d92b554ec94415f8/modules/mol/alg/src/stereo_chemical_props.txt\n\n# skipping content part\nmkdir -p ./alphafold/data/params &amp;&amp; cd ./alphafold/data/params\nwget https://storage.googleapis.com/alphafold/alphafold_params_colab_2022-12-06.tar\ntar --extract --verbose --preserve-permissions --file alphafold_params_colab_2022-12-06.tar\npip install ipykernel ipywidgets tqdm\npip install --upgrade scprep phate\n\n# Install jax\nmodule load miniconda/latest\nmodule load cuda/11.4 cudnn/8.2.2\nexport CUDA_VISIBLE_DEVICES='3'\npip install \"jax[cuda11_cudnn82]\" -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html\n\n# fix last issues\nmamba install -c conda-forge -c bioconda hhsuite\nmamba install -c bioconda kalign3\npip install numpy==1.21.6\n</code></pre>"},{"location":"dangpu/alphafold2/#21-download-references","title":"2.1. Download references","text":"<p>Note</p> <p>Downloading references will not work on one try, had to do a lot of manual re-running of scripts.</p> <pre><code># create folder\nmkdir -p ~/projects/data/Alphafold2/24022023\ncd ~/projects/data/Alphafold2/24022023\n\n# Download all databases\nsh download_all_data.sh ~/projects/data/Alphafold2/24022023/ &gt; download.log 2&gt; download_all.log\n\n# Some fix-ups\n# mmCIF will not work because the firewall blocks the port, so I found this workaroud online\n# ref: https://github.com/deepmind/alphafold/issues/196\nwget -e robots=off -r --no-parent -nH --cut-dirs=7 -q ftp://ftp.ebi.ac.uk/pub/databases/pdb/data/structures/divided/mmCIF/ -P \"${RAW_DIR}\"\n# Last step is to fix all the permissions\nchmod -R 755 24022023/\n</code></pre>"},{"location":"dangpu/alphafold2/#references","title":"References","text":"<ul> <li>ifb-elixirfr</li> <li>deepmind/alphafold</li> </ul>"},{"location":"dangpu/conda/","title":"Conda","text":""},{"location":"dangpu/conda/#setup-on-dangpu","title":"Setup on DanGPU","text":"<pre><code>channels:\n- conda-forge\n- bioconda\n- defaults\nenvs_dirs:\n- /projects/dan1/people/$USER/envs/\n- ~/projects/data/Brickman/conda/envs\npkgs_dirs:\n- ~/.conda/pkgs/\n</code></pre>"},{"location":"dangpu/conda/#setup-on-ku-computer","title":"Setup on KU-computer","text":"<p>Go here and download Miniconda PKG not BASH. If you're running M1/2 please follow this guideline.</p>"},{"location":"dangpu/conda/#example-for-chip-seq-setup","title":"Example for CHIP-seq setup","text":"<pre><code>conda create --name chipseq python=3.6\nconda activate chipseq\nconda install -c bioconda deeptools bedtools\npip install intervene\n</code></pre>"},{"location":"dangpu/nextflow_tower/","title":"Nextflow Tower","text":"<p>This is a guide on how to use Nextflow Tower to monitor nf-core pipeline runs on DanGPU.</p> <p>All nf-core pipelines have been successfully configured for use on DanGPU.</p>"},{"location":"dangpu/nextflow_tower/#getting-started","title":"Getting started","text":"<p>If this is the first time you use Nextflow Tower, sign in and create a personal access token. You need to create a sample sheet before running any nf-core pipeline. Sample sheet format varies according to pipeline and examples can be found in the usage docs:</p> <ul> <li>nf-core/rnaseq usage docs</li> <li>nf-core/chipseq usage docs</li> <li>nf-core/cutandrun usage docs</li> </ul>"},{"location":"dangpu/nextflow_tower/#running-pipelines","title":"Running pipelines","text":"<p>Use the helper script nf-core_tower.sh to run DanGPU nf-core configs with Tower.</p> <pre><code>cd .local/bin\n\n# Start a new tmux session\ntmux new -s session_name\n\n# Export your personal tower access token:\nexport TOWER_ACCESS_TOKEN=your_access_token\n</code></pre> <p>Launch desired nf-core pipeline using helper script. Usage is</p> <pre><code>sh nf-core_tower.sh RUNNAME nextflow run &lt;OPTIONS&gt;\n</code></pre> <p>As a minimum, the pipeline name, samplesheet location, and genome must be defined, e.g. for rnaseq:</p> <pre><code>sh nf-core_tower.sh MYPAPER_2023 nextflow run nf-core/rnaseq -r 3.8.1 --input samplesheet.csv --genome mm10\n</code></pre>"},{"location":"dangpu/nextflow_tower/#tower-cli-installation","title":"Tower CLI installation","text":"<p>The tower cli1 is required to be installed only once to connect the DanGPU as a computing resource. Afterward, it's not required any more2.</p> <pre><code># Download the latest version of Tower CLI:\nwget https://github.com/seqeralabs/tower-cli/releases/download/v0.7.3/tw-0.7.3-linux-x86_64\n\n# Make the file executable and move to directory accessible by $PATH variable:\nmkdir ~/.local/bin &amp;&amp; mv tw-* tw &amp;&amp; chmod +x ~/.local/bin/tw\n</code></pre> <ol> <li> <p>Tower CLI configuration \u21a9</p> </li> <li> <p>Tower Agent \u21a9</p> </li> </ol>"}]}